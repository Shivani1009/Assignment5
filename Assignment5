{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "946d7108-e55b-40d6-98fe-dfa987d4dcf8",
   "metadata": {},
   "source": [
    "Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "and average_of_vehicle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eeb004cf-372c-49da-a354-0bd55825d449",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "    \n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle=name_of_vehicle\n",
    "        self.max_speed=max_speed\n",
    "        self.average_of_vehicle=average_of_vehicle\n",
    "        \n",
    "    def return_vehicles_details(self):\n",
    "        return self.name_of_vehicle, self.max_speed, self.average_of_vehicle\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "653923fa-2620-4666-a971-f508322929ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "bullet=vehicle('royal_enfield',200,30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "33d8036d-11b6-4685-8a6f-0262eea91e4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('royal_enfield', 200, 30)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bullet.return_vehicles_details()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a75ee799-9a93-4ca4-9ff1-03dc92cd054c",
   "metadata": {},
   "source": [
    "Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "the vehicle and its seating capacity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c17d3934-9dfb-418c-9f58-ccf0efac4013",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vehicle Name: tata_nexon seating_capacity: 5\n"
     ]
    }
   ],
   "source": [
    "class Vehicle:\n",
    "\n",
    "    def __init__(self, name, seating_capacity):\n",
    "        self.name = name\n",
    "        self.seating_capacity=seating_capacity\n",
    "\n",
    "class car(Vehicle):\n",
    "    pass\n",
    "\n",
    "Car= car(\"tata_nexon\",5)\n",
    "print(\"Vehicle Name:\", Car.name, \"seating_capacity:\" ,Car.seating_capacity)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b479bd10-9b39-4343-80b6-9d2aea8a78cf",
   "metadata": {},
   "source": [
    "Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b7c7550-5026-4884-a82b-cede142a0524",
   "metadata": {},
   "source": [
    "A class can be derived from more than one superclass in Python. This is called multiple inheritance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cfd6b71d-cc7b-406f-9dd7-b27b0e633a08",
   "metadata": {},
   "outputs": [],
   "source": [
    "class class1:\n",
    "    def test_class1(self):\n",
    "        return 'this is from meth of class1'\n",
    "    \n",
    "class class2:\n",
    "    def test_class2(self):\n",
    "        return 'this is from meth of class2'\n",
    "    \n",
    "class class3(class1,class2):\n",
    "    \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0ebf45f4-78bd-4943-be77-c5f059f60b5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_class3=class3()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0aa819fc-a7d3-4f14-a9d2-a3af3d5fd095",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'this is from meth of class1'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_class3.test_class1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f61707c4-668e-44b9-b137-4a8c901c1720",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'this is from meth of class2'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_class3.test_class2()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86195d91-319d-4744-9114-7277e8ebda36",
   "metadata": {},
   "source": [
    "Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this\n",
    "class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec53381-deec-41a9-b35e-68698c62aa15",
   "metadata": {},
   "source": [
    "Getter: A method that allows you to access an attribute in a given class\n",
    "\n",
    "Setter: A method that allows you to set or mutate the value of an attribute in a class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "20f8fd22-b21b-4388-859c-2c8a7155eb3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Label:\n",
    "    def __init__(self, text, font):\n",
    "        self._text = text\n",
    "        self._font = font\n",
    "\n",
    "    def get_text(self):\n",
    "        return self._text\n",
    "\n",
    "    def set_text(self, value):\n",
    "        self._text = value\n",
    "\n",
    "    def get_font(self):\n",
    "        return self._font\n",
    "\n",
    "    def set_font(self, value):\n",
    "        self._font = value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c2c806b7-7b6c-4730-8e1c-ec84718c884f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'JetBrains Mono NL'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label = Label(\"Fruits\", \"JetBrains Mono NL\")\n",
    "label.get_text()\n",
    "\n",
    "\n",
    "label.set_text(\"Vegetables\")\n",
    "\n",
    "label.get_text()\n",
    "\n",
    "label.get_font()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76f1d525-709d-4afa-8b45-a1df775a21ec",
   "metadata": {},
   "source": [
    "Q5.What is method overriding in python? Write a python code to demonstrate method overriding."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce853a04-9a51-428e-a917-4e6dfa4be7d9",
   "metadata": {},
   "source": [
    "Method overriding in Python is when you have two methods with the same name that each perform different tasks. This is an important feature of inheritance in Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed4009eb-7fdb-49ec-a9c7-46c600e04bf8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
